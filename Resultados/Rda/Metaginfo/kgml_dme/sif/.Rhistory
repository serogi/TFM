file <- "dme04013"
sif2patIGraph(file)
setwd("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/")
file <- "dme04013"
sif2patIGraph(file)
library(hipathia)
pathways <- load_pathways("hsa", pathways_list = c("hsa03320", "hsa04012"))
pathways$species
pathways$all.genes
pathways$path.norm
pathways$eff.norm
dme04013$path.norm
class(pathways)
View(pathways)
pathways$pathigraphs$hsa03320$graph
plot(pathways$pathigraphs$hsa03320$graph)
pathways$pathigraphs$hsa03320$graph
tkplot(pathways$pathigraphs$hsa03320$graph)
plot(graphs_dme$dme04068$graph)
plot(graphs_dme$dme04140$graph)
plot(graphs_dme$dme04150$graph)
plot(graphs_dme$dme04213$graph)
plot(graphs_dme$dme04214$graph)
plot(graphs_dme$dme04310$graph)
plot(graphs_dme$dme04933$graph)
# Random bipartite graph
inc <- matrix(sample(0:1, 50, replace = TRUE, prob=c(2,1)), 10, 5)
g <- graph_from_incidence_matrix(inc)
plot(g, layout = layout_as_bipartite,
vertex.color=c("green","cyan")[V(g)$type+1])
g %>%
add_layout_(as_bipartite()) %>%
plot()
layout_as_star(g)
g <- make_star(10)
layout_as_star(g)
layout_nicely(g)
layout_nicely(dme04013)
plot(layout_nicely(dme04013))
plot(layout_as_star(dme04013))
plot(layout_as_bipartite(dme04013))
layout_(dme04013, with_fr(), normalize)
layout_(dme04013, with_fr(), normalize())
plot(layout_(dme04013, with_fr(), normalize()))
View(g)
View(g)
library(KEGGgraph)
library(igraph)
library(graph)
library(devtools)
setwd("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hipathia-master/")
load_all() # Cargar Hipathia
load_all("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpAnnot/") # Cargar HpAnnot
library(KEGGgraph)
library(igraph)
library(graph)
library(devtools)
setwd("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hipathia-master/")
load_all() # Cargar Hipathia
load_all("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpAnnot/") # Cargar HpAnnot
setwd("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/scripts/new_version/")
source("graphs.R")
i.folder <- "~/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif"
spe <- "dme"
graphs_dme <- load.graphs(i.folder, spe)
graphs_dme$dme04013$graph
# plot(graphs_dme$dme04013$graph)
dme04013 <- graphs_dme$dme04013$graph
arista <- E(dme04013)
vertice <- V(dme04013)
arista
vertice
etiquetas <- graphs_dme$dme04013$label.id
etiquetas
nombres_arista <- edge_attr_names(dme04013) # Nombres de los atributos de las aristas
nombres_arista
nombres_vertice <- vertex_attr_names(dme04013) # Nombres de los atributos de los vértices
nombres_vertice
setwd("/home/sromera/Documents/TFM/scripts_hipathia/pruebas_grafos/")
jpeg("dme04013.jpg", width= 1000, height = 1000)
plot(dme04013)
dev.off()
setwd("/home/sromera/Documents/TFM/scripts_hipathia/pruebas_grafos/")
jpeg("dme04013.jpg", width= 1000, height = 1000)
plot(dme04013)
kplot(dme04013)
tkplot(dme04013)
plot(dme04013)
refine.layout <- function(gg, coords, fixed, e = 10e-7, maxiter = 500, w = 0.5,
align.final.at.right = TRUE, p0q = 0.01, p0mult = 5,
use.edges = TRUE){
cs <- coords
V(gg)$x <- cs[,1]
V(gg)$y <- cs[,2]
minx <- min(cs[fixed==T,1])
maxx <- max(cs[fixed==T,1])
miny <- min(cs[fixed==T,2])
maxy <- max(cs[fixed==T,2])
#cs[fixed==F,1] <- sample(seq(minx,maxx,length.out=1000),1) #minx
#cs[fixed==F,2] <- sample(seq(miny,maxy,length.out=1000),1) #miny
n <- length(V(gg))
#maxdis <- sqrt((maxx-minx)^2+(maxy-miny)^2)
maxdis <- max(abs(maxx - minx), 4*abs(maxy - miny))
# get neighbour
global_dis <- shortest.paths(gg)
global_dis[is.infinite(global_dis)] <-
max(global_dis[!is.infinite(global_dis)]) + 1
nglobal_dis <- (max(global_dis) - global_dis) * (1 - diag(nrow(global_dis)))
nglobal_dis <- nglobal_dis/max(nglobal_dis)
adjm <- (global_dis == 1) + 0
dists <- c()
for(i in 1:nrow(adjm)){
anodes <- which(adjm[i,] == 1)
for(j in anodes){
dists <- c(dists, sqrt((cs[i,1] - cs[j,1])^2 + (cs[i,2] - cs[j,2])^2))
}
}
p0 <- stats::quantile(dists[dists > 0], p0q)
p00 <- p0 * p0mult
if(align.final.at.right == TRUE){
nonfixed <- intersect(which(fixed == FALSE),
which(!(V(gg)$name %in% get.edgelist(gg)[,1])))
for(nf in nonfixed){
friends <- which(global_dis[nf,] == 1)
x <- max(V(gg)$x[friends]) + p0 * 3
y <- mean(V(gg)$y[friends])
cs[nf,] <- c(x,y)
}
}
# Move also nodes with duplicated coordinates
fixed[duplicated(cs)] <- F
iter <- 1
medif <- e+1
locations <- list()
while(medif > e & iter < maxiter){
cs2 <- cs
for(i in 1:n){
if(fixed[i] == FALSE){
# node forces
node_forces <- mat.or.vec(nr = n, nc = 2)
for(j in 1:n){
if(i != j){
is_only_repeller <- !(nglobal_dis[i,j] == 1)
pp <- c(p00,p0)[is_only_repeller + 1]
node_forces[j,] <- get.node.vectorial.force(cs[i,1], cs[i,2],
cs[j,1], cs[j,2],
pp, maxdis,
repeller =
is_only_repeller)
if(global_dis[i,j] == 1){
node_forces[j,] <- node_forces[j,] * 10
}
}
}
#print(".")
# edge forces
if(use.edges == TRUE){
edges <- get.edgelist(gg)
ne <- nrow(edges)
edge_forces <- mat.or.vec(nr = ne, nc = 2)
for(j in 1:nrow(edges)){
if(V(gg)$name[i] != edges[j,1] & V(gg)$name[i] != edges[j,2]){
c0 <- cs[i,]
c1 <- cs[which(V(gg)$name == edges[j,1]),]
c2 <- cs[which(V(gg)$name == edges[j,2]),]
edge_forces[j,] <- get.edge.vectorial.force(c0, c1, c2, p0,
maxdis)
}
}
forces <- rbind(node_forces, edge_forces)
} else {
forces <- node_forces
}
cs2[i,] <- cs2[i,] + colMeans(forces) * w
#print("*")
#if(i==61) stop("pepe")
}
}
medif <- max(abs(cs - cs2))
cs <- cs2
locations[[iter]] <- cs
iter <- iter + 1
# cat(iter,medif,"\n")
}
return(list(
layout = cs,
locations = locations,
iter = iter,
maxiter = maxiter,
w = w,
e = e,
laste = medif,
p0 = p0,
p00 = p00,
maxdis = maxdis,
dists = dists,
fixed = fixed
))
}
plot.node.trip <- function(locations, fixed){
nodes <- which(fixed == FALSE)
for(node in nodes){
lines(t(sapply(locations, function(x) c(x[node,1], x[node,2]))),
col = "red",
lty = 2)
}
}
get.node.vectorial.force <- function(x1, y1, x2, y2, p0, maxdis,
repeller = FALSE){
dis <- sqrt((x1 - x2)^2 + (y1 - y2)^2)
dis <- max(abs(x1 - x2), 4 * abs(y1 - y2))
if(repeller == TRUE){
if(dis > p0){
force <- 0
} else {
ndis <- (p0 - dis)/p0
force <- -ndis
}
} else {
if(dis > p0){
ndis <- (dis - p0)/(maxdis - p0)
force <- ndis
} else {
ndis <- (p0 - dis)/p0
force <- -ndis
}
}
v <- c(x2 - x1, y2 - y1)
if(v[1] == 0 & v[2] == 0){
v <- rnorm(2)
}
v <- v/sqrt(v[1]^2 + v[2]^2)
v <- v * force
return(v)
}
get.edge.vectorial.force <- function(c0, c1, c2, p0, maxdis){
x0 <- c0[1]
y0 <- c0[2]
x1 <- c1[1]
y1 <- c1[2]
x2 <- c2[1]
y2 <- c2[2]
mod <- sqrt( (x2 - x1)^2 + (y2 - y1)^2 )
s <- ( (x0 - x1) * (x2 - x1) + (y0 - y1) * (y2 - y1)) / mod
sx <- x1 + (s/mod)*(x2 - x1)
sy <- y1 + (s/mod)*(y2 - y1)
if(x1 < x2) {
xmin <- x1
xmax <- x2
} else {
xmin <- x2
xmax <- x1
}
if(y1 < y2) {
ymin <- y1
ymax <- y2
} else {
ymin <- y2
ymax <- y1
}
if(sx < xmin | sx > xmax | sy < ymin | sy > ymax){
force <- 0
} else {
dis <- sqrt((x0 - sx)^2 + (y0 - sy)^2)
if(dis > p0){
force <- 0
} else {
ndis <- (p0 - dis)/p0
force <- -ndis
}
}
v <- c(sx - x0, sy - y0)
if(v[1] == 0 & v[2] == 0){
v <- rnorm(2)
}
v <- v/sqrt(v[1]^2 + v[2]^2)
v <- v * force
return(v)
}
?find.all.paths.from
??find.all.paths.from
??find.all.paths.from()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
summary(cars)
plot(pressure)
print("Hello, Susanne!")
plot(pressure)
scale10 <- barabasi.game(10,1)
library(igraph)
scale10 <- barabasi.game(10,1)
scale100 <- barabasi.game(100,1)
scale1000 <- barabasi.game(100, 1)
plot(scale10)
scale10 <- barabasi.game(10,1, directed=FALSE)
scale100 <- barabasi.game(100,1, directed = FALSE)
scale1000 <- barabasi.game(100, 1, directed= FALSE)
plot(scale10)
plot(scale100)
scale10 <- barabasi.game(10,2, directed=FALSE)
scale100 <- barabasi.game(100,2, directed = FALSE)
scale1000 <- barabasi.game(100, 2, directed= FALSE)
plot(scale10)
plot(scale100)
plot(scale1000)
scale10_plot <- plot(scale10)
scale10_plot
getwd()
setwd("/media/sromera/SRG/Máster/BCS/Networks/")
getwd() # To know the location where you are saving the images
plot(scale10)
png(filename="scale10.png")
dev.off
getwd() # To know the location where you are saving the images
plot(scale10)
png(filename="scale10.png")
dev.off
plot(scale10)
plot(scale10)
plot(scale10)
getwd() # To know the location where you are saving the images
plot(scale10)
png(filename="scale10.png")
dev.off
plot(scale10)
getwd() # To know the location where you are saving the images
plot(scale100)
plot(scale100)
getwd() # To know the location where you are saving the images
plot(scale100)
png(filename="scale100.png")
dev.off
plot(scale1000)
#barabasi.game(number_of_nodes, power, directed_or_undirected)
scale10 <- barabasi.game(10,2, directed=FALSE)
scale100 <- barabasi.game(100,2, directed = FALSE)
scale1000 <- barabasi.game(100, 2, directed= FALSE)
plot(scale1000)
plot(scale10, layout=layout.fruchterman.reingold)
plot(scale100, layout=layout.fruchterman.reingold)
plot(scale100, layout=layout.fruchterman.reingold)
plot(scale1000, layout=layout.fruchterman.reingold)
as.matrix(read.table("US_airlines.txt") # Be sure that this file is in the same folder as this document or it will not work
as.matrix(read.table("US_airlines.txt", sep="\t")) # Be sure that this file is in the same folder as this document or it will not work
airlines_matrix <- as.matrix(read.table("US_airlines.txt", sep="\t")) # Be sure that this file is in the same folder as this document or it will not work
head(airlines_matrix)
airlines_network <- graph.adjacency(airlines_matrix, mode = "undirected")
airlines_network <- graph.edgelist(airlines_matrix, mode = "undirected")
airlines_network <- graph.edgelist(airlines_matrix, directed=FALSE)
airlines_network <- graph.edgelist(airlines_matrix, directed=FALSE)
plot(airlines_network)
hist(degre(airlines_network))
hist(degree(airlines_network))
sample_fitness(airlines_network)
power_centrality(airlines_network)
power_centrality(airlines_network, nodes=V(airlines_network))
fit_power_law(airlines_network)
airlines_network
power(airlines_network)
head(power_centrality(airlines_network))
library(KEGGgraph)
library(igraph)
library(graph)
library(devtools)
setwd("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hipathia-master/")
load_all() # Cargar Hipathia
load_all("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpAnnot/") # Cargar HpAnnot
load("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/compounds_list.RData")
library(KEGGgraph)
library(igraph)
library(graph)
library(devtools)
setwd("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hipathia-master/")
load_all() # Cargar Hipathia
load_all("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpAnnot/") # Cargar HpAnnot
setwd("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/scripts/new_version/")
source("graphs.R")
i.folder <- "~/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif"
spe <- "dme"
graphs_dme <- load.graphs(i.folder, spe)
graphs_dme$dme04013$graph # Efectivamente, tenemos un grafo de clase igraph con toda la información que eso conlleva.
setwd()
sif2patIGraph()
sif2patIGraph(dme04013)
# plot(graphs_dme$dme04013$graph)
dme04013 <- graphs_dme$dme04013$graph
arista <- E(dme04013)
vertice <- V(dme04013)
arista
vertice
etiquetas <- graphs_dme$dme04013$label.id
etiquetas
nombres_arista <- edge_attr_names(dme04013) # Nombres de los atributos de las aristas
nombres_arista
nombres_vertice <- vertex_attr_names(dme04013) # Nombres de los atributos de los vértices
nombres_vertice
sif2patIGraph(dme04013)
sif2patIGraph("dme04013")
setwd("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/")
sif2patIGraph("dme04013")
dme04013 <- sif2patIGraph("dme04013")
dme04013 <- sif2patIGraph("dme04013.sif")
dme04933 <- sif2patIGraph("dme04933.sif")
sif2patIGraph(wkd)
wkd <- setwd("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/")
sif2patIGraph(wkd)
setwd("/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/")
pre.file <- "dme04933"
sif2patIGraph(pre.file)
pre.file <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/dme04933"
sif2patIGraph(pre.file)
pre.file <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/dme04933"
sif2patIGraph(pre.file)
sif2patIGraph(pre.file)
pre.file <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/dme04933"
dme04933 <- sif2patIGraph(pre.file)
pre.file <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/dme04933"
dme04933 <- sif2patIGraph(pre.file)
plot(dme04933)
kplot(dme04933)
tkplot(dme04933)
prefix_list <-
pre.file <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/dme04933"
for (prefix in prefix_list)
dme04933 <- sif2patIGraph(pre.file)
tkplot(dme04933, edge.color="hipathia", edge.shape="square")
tkplot(dme04933, edge.color="blue", edge.shape="square")
prefix_list <-
pre.file <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/dme04933"
for (prefix in prefix_list)
dme04933 <- sif2patIGraph(pre.file)
tkplot(dme04933, vertex.color="blue", vertex.shape="square")
prefix_list <-
pre.file <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/dme04933"
for (prefix in prefix_list)
dme04933 <- sif2patIGraph(pre.file)
tkplot(dme04933, vertex.color="cyan", vertex.shape="square")
prefix_list <- c(dme04013,dme04068, dme04140, dme04150, dme04213, dme04214,
dme04310, dme04320, dme04341, dme04624, dme04711, dme04933)
prefix_list <- c("dme04013","dme04068", "dme04140", "dme04150", "dme04213", "dme04214",
"dme04310", "dme04320", "dme04341", "dme04624", "dme04711", "dme04933")
prefix_list <- c("dme04013","dme04068", "dme04140", "dme04150", "dme04213", "dme04214",
"dme04310", "dme04320", "dme04341", "dme04624", "dme04711", "dme04933")
for (prefix in prefix_list){
pre.file <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/" + prefix
do.call("<-", list(prefix, sif2patIGraph(pre.file)))
}
prefix_list <- c("dme04013","dme04068", "dme04140", "dme04150", "dme04213", "dme04214",
"dme04310", "dme04320", "dme04341", "dme04624", "dme04711", "dme04933")
path <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/"
for (prefix in prefix_list){
paste(path, prefix, sep="")
do.call("<-", list(prefix, sif2patIGraph(pre.file)))
}
View(dme04013)
prefix_list <- c("dme04013","dme04068", "dme04140", "dme04150", "dme04213", "dme04214",
"dme04310", "dme04320", "dme04341", "dme04624", "dme04711", "dme04933")
path <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/"
for (prefix in prefix_list){
paste(path, prefix, sep="")
do.call("<-", list(prefix, sif2patIGraph(pre.file)))
}
plot(dme04013)
tkplot(dme04013)
tkplot(dme04013, vertex.shape="square")
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=5)
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=25)
tkplot(dme04013, vertex.shape="square", vertex.color=c("white", "cyan"), vertex.size=25)
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=25)
V(dme04013)$nodeX
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=25, nodeX = V(dme04013)$nodeX)
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=25, X = V(dme04013)$nodeX)
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=25, X = V(dme04013)$nodeX, Y V(dme04013)$nodeY)
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=25, X = V(dme04013)$nodeX, Y = V(dme04013)$nodeY)
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=25, coords = cbind(V(dme04013)$nodeX, V(dme04013)$nodeY))
prefix_list <- c("dme04013","dme04068", "dme04140", "dme04150", "dme04213", "dme04214",
"dme04310", "dme04320", "dme04341", "dme04624", "dme04711", "dme04933")
path <- "/home/sromera/Documents/TFM/scripts_hipathia/local_hipathia/hpConstructor-master/RDatas_constructor/pathways/XMLs/dme/sif/"
for (prefix in prefix_list){
pre.file = paste(path, prefix, sep="")
do.call("<-", list(prefix, sif2patIGraph(pre.file)))
}
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=25, coords = cbind(V(dme04013)$nodeX, V(dme04013)$nodeY))
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=15, coords = cbind(V(dme04013)$nodeX, V(dme04013)$nodeY))
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=15, vertex.label.cex=20, coords = cbind(V(dme04013)$nodeX, V(dme04013)$nodeY))
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=15, vertex.label.cex=5, coords = cbind(V(dme04013)$nodeX, V(dme04013)$nodeY))
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=15, vertex.label.cex=0.5, coords = cbind(V(dme04013)$nodeX, V(dme04013)$nodeY))
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=15, vertex.label.cex=0.8, coords = cbind(V(dme04013)$nodeX, V(dme04013)$nodeY))
V(dme04013)$nodeX
V(dme04013)$nodeY
cbind(V(dme04013)$nodeX, V(dme04013)$nodeY)
g <- dme04013
coor <- cbind(V(dme04013)$nodeX, V(dme04013)$nodeY)
tk_set_coords(g, coor)
coor
g
V(g)$X
V(g)$x
V(g)$nodeX
tk_set_coords(g, coor)
coordenadas <- tk_coords(dme04013)
tk_set_coords("15", coor)
coordenadas <- tk_coords("10")
coordenadas <- tk_coords("9")
coordenadas
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=15, vertex.label.cex=0.8, coords = coor)
tkplot(dme04013, vertex.shape="square", vertex.color="cyan", vertex.size=15, vertex.label.cex=0.8, layout = coor)
E(dme04013)$labels
E(dme04013)
coor <- cbind(V(dme04068)$nodeX, V(dme04068)$nodeY)
tkplot(dme04068, vertex.shape="square", vertex.color="cyan", vertex.size=15, vertex.label.cex=0.8, layout = coor)
